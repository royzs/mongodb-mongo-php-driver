<?php
require_once 'PHPUnit/Framework.php';

require_once 'Mongo.php';

/**
 * Test class for Mongo.
 * Generated by PHPUnit on 2009-04-10 at 13:30:28.
 */
class MongoCollectionTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Mongo
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $db = new MongoDB($this->sharedFixture, "phpunit");
        $this->object = $db->selectCollection('c');
        $this->object->drop();
    }

    public function test__toString() {
      $this->assertEquals((string)$this->object, 'phpunit.c');
    }

    public function testDrop() {
      $ns = $this->object->db->selectCollection('system.namespaces');

      $this->object->insert(array('x' => 1));
      $this->object->ensureIndex('x');

      $c = $ns->findOne(array('name' => 'phpunit.c'));
      $this->assertNotNull($c);

      $this->object->drop();

      $c = $ns->findOne(array('name' => 'phpunit.c'));
      $this->assertEquals($c, null);
    }

    public function testValidate() {
      $v = $this->object->validate();
      $this->assertEquals($v['ok'], 0);
      $this->assertEquals($v['errmsg'], 'ns not found');

      $this->object->insert(array('a' => 'foo'));
      $v = $this->object->validate();
      $this->assertEquals($v['ok'], 1);
      $this->assertEquals($v['ns'], 'phpunit.c');
      $this->assertNotNull($v['result']);
    }

    public function testInsert() {
      $a = array("n" => NULL,
                 "l" => 234234124,
                 "d" => 23.23451452,
                 "b" => true,
                 "a" => array("foo"=>"bar",
                              "n" => NULL,
                              "x" => new MongoId("49b6d9fb17330414a0c63102")),
                 "d2" => new MongoDate(1271079861),
                 "regex" => new MongoRegex("/xtz/g"),
                 "_id" => new MongoId("49b6d9fb17330414a0c63101"),
                 "string" => "string");
      
      $this->assertTrue($this->object->insert($a));
      $obj = $this->object->findOne();

      $this->assertEquals($obj['n'], null);
      $this->assertEquals($obj['l'], 234234124);
      $this->assertEquals($obj['d'], 23.23451452);
      $this->assertEquals($obj['b'], true);
      $this->assertEquals($obj['a']['foo'], 'bar');
      $this->assertEquals($obj['a']['n'], null);
      $this->assertNotNull($obj['a']['x']);
      $this->assertEquals($obj['d2']->sec, 1271079);
      $this->assertEquals($obj['d2']->usec, 861000);
      $this->assertEquals($obj['regex']->regex, 'xtz');
      $this->assertEquals($obj['regex']->flags, 'g');
      $this->assertNotNull($obj['_id']);
      $this->assertEquals($obj['string'], 'string');

      $this->assertFalse($this->object->insert(null));
      $this->assertFalse($this->object->insert(array()));
      $this->assertFalse($this->object->insert(1345));
      $this->assertFalse($this->object->insert(true));
      $this->assertTrue($this->object->insert(array(1,2,3,4,5)));
    }

    public function testBatchInsert() {
      $this->assertFalse($this->object->batchInsert(null));
      $this->assertFalse($this->object->batchInsert(array()));
      $this->assertFalse($this->object->batchInsert(array(1,2,3)));
      $this->assertTrue($this->object->batchInsert(array('z'=>array('foo'=>'bar'))));

      $a = array( array( "x" => "y"), array( "x"=> "z"), array("x"=>"foo"));
      $this->object->batchInsert($a);
      $this->assertEquals(4, $this->object->count());

      $cursor = $this->object->find()->sort(array("x" => -1));
      $x = $cursor->getNext();
      $this->assertEquals('bar', $x['foo']);
      $x = $cursor->getNext();
      $this->assertEquals('z', $x['x']);
      $x = $cursor->getNext();
      $this->assertEquals('y', $x['x']);
      $x = $cursor->getNext();
      $this->assertEquals('foo', $x['x']);
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testFindException1() {
      $c = $this->object->find(null);
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testFindException2() {
      $c = $this->object->find(3);
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testFindException3() {
      $c = $this->object->find(true);
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testFindException4() {
      $c = $this->object->find(array(), null);
    }

    public function testFind() {
      for ($i=0;$i<50;$i++) {
        $this->object->insert(array('x' => $i));
      }

      $c = $this->object->find();
      $this->assertEquals($c->count(), 50);
      $c = $this->object->find(array());
      $this->assertEquals($c->count(), 50);

      $this->object->insert(array("foo" => "bar",
                                  "a" => "b",
                                  "b" => "c"));

      $c = $this->object->find(array('foo' => 'bar'), array('a'=>1, 'b'=>1));

      $this->assertTrue($c instanceof MongoCursor);
      $obj = $c->getNext();
      $this->assertEquals('b', $obj['a']);
      $this->assertEquals('c', $obj['b']);
      $this->assertEquals(null, $obj['foo']);
    }

    /**
     * @todo Implement testSelectCollection().
     */
    public function testFindOne() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDropDB().
     */
    public function testUpdate() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRepairDB().
     */
    public function testRemove() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testLastError().
     */
    public function testEnsureIndex() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPrevError().
     */
    public function testDeleteIndex() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testResetError().
     */
    public function testDeleteIndexes() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testForceError().
     */
    public function testGetIndexInfo() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testMasterInfo().
     */
    public function testCount() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testClose().
     */
    public function testSave() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testClose().
     */
    public function testGetDBRef() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testClose().
     */
    public function testCreateDBRef() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
?>
