<?php
require_once 'PHPUnit/Framework.php';

require_once 'Mongo/Cursor.php';

/**
 * Test class for Mongo.
 * Generated by PHPUnit on 2009-04-09 at 18:09:02.
 */
class MongoCursorTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    MongoCursor
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->object = $this->sharedFixture->selectCollection('phpunit', 'c');
        $this->object->drop();
    }

    public function testHasNext() {
        $c = $this->object->find();
        $this->assertFalse($c->hasNext());

        $this->object->insert(array('foo' => 'bar'));
        $c = $this->object->find();
        $this->assertTrue($c->hasNext());

        $c->getNext();
        $this->assertFalse($c->hasNext());
    }

    public function testGetNext() {
        $c = $this->object->find();
        $this->assertEquals($c->getNext(), null);

        for ($i=0; $i<10; $i++) {
            $this->object->insert(array('z' => $i));
        }

        $c = $this->object->find();
        for ($i=0; $i<10; $i++) {
            $c->getNext();
            $this->assertNotNull($c);
        }
        $this->assertEquals($c->getNext(), null);
    }

    public function testLimit() {
        for ($i=0; $i<20; $i++) {
            $this->object->insert(array('z' => $i));
        }

        $c = $this->object->find()->limit(0);
        $count = 0;
        foreach ($c as $obj) {
            $count++;
        }
        $this->assertEquals($count, 20);

        $c = $this->object->find()->limit(null);
        $count = 0;
        foreach ($c as $obj) {
            $count++;
        }
        $this->assertEquals($count, 20);

        $c = $this->object->find()->limit(5);
        $count = 0;
        foreach ($c as $obj) {
            $count++;
        }
        $this->assertEquals($count, 5);

        $c = $this->object->find()->limit(20);
        $count = 0;
        foreach ($c as $obj) {
            $count++;
        }
        $this->assertEquals($count, 20);

        $c = $this->object->find()->limit(200);
        $count = 0;
        foreach ($c as $obj) {
            $count++;
        }
        $this->assertEquals($count, 20);

        $c = $this->object->find()->limit("12");
        $count = 0;
        foreach ($c as $obj) {
            $count++;
        }
        $this->assertEquals($count, 12);
    }

    public function testSoftLimit() {
        for ($i=0; $i<20; $i++) {
            $this->object->insert(array('z' => $i));
        }

        $c = $this->object->find()->softLimit(0);
        $count = 0;
        foreach ($c as $obj) {
            $count++;
        }
        $this->assertEquals($count, 20);

        $c = $this->object->find()->softLimit(null);
        $count = 0;
        foreach ($c as $obj) {
            $count++;
        }
        $this->assertEquals($count, 20);

        $c = $this->object->find()->softLimit("12");
        $count = 0;
        foreach ($c as $obj) {
            $count++;
        }
        $this->assertEquals($count, 20);

        $c = $this->object->find()->softLimit(5);
        $count = 0;
        foreach ($c as $obj) {
            $count++;
        }
        $this->assertEquals($count, 20);

        $c = $this->object->find()->softLimit(20);
        $count = 0;
        foreach ($c as $obj) {
            $count++;
        }
        $this->assertEquals($count, 20);

        $c = $this->object->find()->softLimit(200);
        $count = 0;
        foreach ($c as $obj) {
            $count++;
        }
        $this->assertEquals($count, 20);
    }

    public function testSkip()
    {
        for ($i=0; $i<20; $i++) {
            $this->object->insert(array('z' => $i));
        }

        $c = $this->object->find()->sort(array('z'=>1))->skip(4);
        $count = 4;
        foreach ($c as $obj) {
            $this->assertEquals($count, $obj['z']);
            $count++;
        }
        $this->assertEquals($count, 20);

        $c = $this->object->find()->sort(array('z'=>1))->skip(-2);
        $count = 0;
        foreach ($c as $obj) {
            $this->assertEquals($count, $obj['z']);
            $count++;
        }
        $this->assertEquals($count, 20);

        $c = $this->object->find()->sort(array('z'=>1))->skip(null);
        $count = 0;
        foreach ($c as $obj) {
            $this->assertEquals($count, $obj['z']);
            $count++;
        }
        $this->assertEquals($count, 20);
    }

    public function testSort() {
        for ($i=0; $i<20; $i++) {
            if ($i % 2 == 0) {
                $this->object->insert(array('z' => $i, 'x' => 'a'));
            }
            else if($i % 3 == 0) {
                $this->object->insert(array('z' => $i, 'x' => 'b'));
            }
            else {
                $this->object->insert(array('z' => $i, 'x' => 'c'));
            }
        }

        $c = $this->object->find()->sort(array('z'=>1));
        $count = 0;
        foreach ($c as $obj) {
            $this->assertEquals($count, $obj['z']);
            $count++;
        }
        $this->assertEquals($count, 20);

        $c = $this->object->find()->sort(array('x'=>1, 'z'=>-1));
        for ($i=18;$i>=0;$i-=2) {
            $obj = $c->getNext();
            $this->assertEquals($obj['z'], $i);
            $this->assertEquals($obj['x'], 'a');
        }
        $obj = $c->getNext();
        $this->assertEquals($obj['z'], 15);
        $this->assertEquals($obj['x'], 'b');
        $obj = $c->getNext();
        $this->assertEquals($obj['z'], 9);
        $this->assertEquals($obj['x'], 'b');
        $obj = $c->getNext();
        $this->assertEquals($obj['z'], 3);
        $this->assertEquals($obj['x'], 'b');

        for ($i=19;$i>=0;$i-=2) {
            if ($i % 3 == 0) {
                continue;
            }
            $obj = $c->getNext();
            $this->assertEquals($obj['z'], $i);
            $this->assertEquals($obj['x'], 'c');
        }

        $this->assertFalse($c->hasNext());
    }

    public function testCount() {
        $this->assertEquals($this->object->find()->count(), 0);
        for ($i=0; $i<20; $i++) {
            $this->object->insert(array('z' => $i));
        }

        $this->assertEquals($this->object->find()->count(), 20);
        $this->assertEquals($this->object->find(array('z' => array('$lt' => 5)))->count(), 5);
        $this->assertEquals($this->object->find()->limit(5)->count(), 20);
    }

    public function testCurrent() {
        for ($i=0; $i<20; $i++) {
            $this->object->insert(array('z' => $i));
        }

        $c = $this->object->find()->sort(array('z' => -1));
        $this->assertEquals($c->current(), null);
        for ($i=19; $i>=0; $i--) {
            $c->next();
            $obj = $c->current();
            $this->assertEquals($obj['z'], $i);
        }
        $c->next();
        $this->assertEquals($c->current(), null);
    }

    public function testKey() {
        for ($i=0; $i<20; $i++) {
            $this->object->insert(array('z' => $i));
        }

        $c = $this->object->find();
        foreach ($c as $k=>$v) {
            $this->assertEquals($k, (string)$v['_id']);
        }
    }

    public function testNext() {
        for ($i=0; $i<20; $i++) {
            $this->object->insert(array('z' => $i));
        }

        $c = $this->object->find()->skip(3)->sort(array('z'=>1))->limit(3);
        $c->next();
        $c->next();
        $c->next();

        $x = $c->current();
        $this->assertEquals($x['z'], 5);

        // don't crash
        $c->next();
        $this->assertEquals($c->current(), null);
        $c->next();
        $this->assertEquals($c->current(), null);
        $c->next();
        $this->assertEquals($c->current(), null);
    }

    public function testRewind() {
        for ($i=0; $i<5; $i++) {
            $this->object->insert(array('z' => $i));
        }

        $c = $this->object->find()->sort(array('z'=>1));

        $c->next();
        $x = $c->current();
        $this->assertEquals($x['z'], 0);
        $c->next();
        $x = $c->current();
        $this->assertEquals($x['z'], 1);

        $c->rewind();
        $x = $c->current();
        $this->assertEquals($x['z'], 0);
    }

    public function testValid() {
        $this->object->insert(array('z' => 0));

        $c = $this->object->find();
        $this->assertFalse($c->valid());
        $c->next();
        $this->assertTrue($c->valid());
        $c->next();
        $this->assertFalse($c->valid());
    }

    public function testReset() {
        for ($i=0; $i<5; $i++) {
            $this->object->insert(array('z' => $i));
        }

        $c = $this->object->find()->sort(array('z'=>1));
        $x = $c->current();
        $this->assertEquals($x, null);

        $c->next();
        $x = $c->current();
        $this->assertEquals($x['z'], 0);

        $c->reset();

        // this should be ok
        $c->limit(1)->skip(2);
        $obj = $c->getNext();
        $this->assertEquals($obj['z'], 2);
        $this->assertFalse($c->hasNext());
    }

    /**
     * @expectedException MongoCursorException
     */
    public function testCursorException1() {
        $c = $this->object->find();
        $c->hasNext();
        $c->limit(4);
    }

    /**
     * @expectedException MongoCursorException
     */
    public function testCursorException2() {
        $c = $this->object->find();
        $c->hasNext();
        $c->softLimit(4);
    }

    /**
     * @expectedException MongoCursorException
     */
    public function testCursorException3() {
        $c = $this->object->find();
        $c->hasNext();
        $c->sort(array('x' => 1));
    }

    /**
     * @expectedException MongoCursorException
     */
    public function testCursorException4() {
        $c = $this->object->find();
        $c->getNext();
        $c->skip(4);
    }
}
?>
