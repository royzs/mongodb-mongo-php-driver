<?php
require_once 'PHPUnit/Framework.php';

/**
 * Test class for Mongo.
 * Generated by PHPUnit on 2009-04-09 at 18:09:02.
 */
class MongoDBTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    MongoDB
     * @access protected
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->object = new MongoDB($this->sharedFixture, "phpunit");
        $this->object->start = memory_get_usage(true);
    }

    protected function tearDown() {
        $this->assertEquals($this->object->start, memory_get_usage(true));
    }

    public function test__toString() {
        $this->assertEquals((string)$this->object, "phpunit");
    }

    public function testGetGridFS() {
        $grid = $this->object->getGridFS();

        $this->assertTrue($grid instanceof MongoGridFS);
        $this->assertTrue($grid instanceof MongoCollection);

        $this->assertEquals((string)$grid, "phpunit.fs.files");
        $this->assertEquals((string)$grid->chunks, "phpunit.fs.chunks");

        $grid = $this->object->getGridFS("foo");
        $this->assertEquals((string)$grid, "phpunit.foo.files");
        $this->assertEquals((string)$grid->chunks, "phpunit.foo.chunks");

        $grid = $this->object->getGridFS("foo", "bar");
        $this->assertEquals((string)$grid, "phpunit.foo");
        $this->assertEquals((string)$grid->chunks, "phpunit.bar");
    }

    public function testGetSetProfilingLevel() {
        $prev = $this->object->setProfilingLevel(MongoDB::PROFILING_ON);
        $level = $this->object->getProfilingLevel();
        $this->assertEquals($level, MongoDB::PROFILING_ON);

        $prev = $this->object->setProfilingLevel(MongoDB::PROFILING_SLOW);
        $level = $this->object->getProfilingLevel();
        $this->assertEquals($level, MongoDB::PROFILING_SLOW);
        $this->assertEquals($prev, MongoDB::PROFILING_ON);

        $prev = $this->object->setProfilingLevel(MongoDB::PROFILING_OFF);
        $level = $this->object->getProfilingLevel();
        $this->assertEquals($level, MongoDB::PROFILING_OFF);
        $this->assertEquals($prev, MongoDB::PROFILING_SLOW);

        $prev = $this->object->setProfilingLevel(MongoDB::PROFILING_OFF);
        $this->assertEquals($prev, MongoDB::PROFILING_OFF);
    }


    /**
     * @todo Implement testDrop().
     */
    public function testDrop() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRepair().
     */
    public function testRepair() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @expectedException InvalidArgumentException
     */
    public function testSelectCollectionException1()
    {
        $this->object->selectCollection('$');
    }

    public function testSelectCollection() {
        $this->assertEquals((string)$this->object->selectCollection('x'), 'phpunit.x');
        $this->assertEquals((string)$this->object->selectCollection(''), 'phpunit.');
        $this->assertEquals((string)$this->object->selectCollection('..'), 'phpunit...');
        $this->assertEquals((string)$this->object->selectCollection('a b c'), 'phpunit.a b c');
    }

    public function testCreateCollection() {
        $ns = $this->object->selectCollection('system.namespaces');
        $this->object->drop('z');
        $this->object->drop('zz');
        $this->object->drop('zzz');

        $this->object->createCollection('z');
        $obj = $ns->findOne(array('name' => 'phpunit.z'));
        $this->assertNotNull($obj);

        $c = $this->object->createCollection('zz', true, 100);
        $obj = $ns->findOne(array('name' => 'phpunit.zz'));
        $this->assertNotNull($obj);

        for($i=0;$i<10;$i++) {
            $c->insert(array('x' => $i));
        }
        $this->assertLessThan(10, $c->count());

        $c = $this->object->createCollection('zzz', true, 10000, 5);
        $obj = $ns->findOne(array('name' => 'phpunit.zzz'));
        $this->assertNotNull($obj);

        for($i=0;$i<10;$i++) {
            $c->insert(array('x' => $i));
        }
        $this->assertEquals($c->count(), 5);
    }

    public function testDropCollection() {
        $ns = $this->object->selectCollection('system.namespaces');

        $c = $this->object->selectCollection("droopy");
        $c->insert(array('foo' => 'bar'));
        $c->ensureIndex('foo');
        $c->findOne();

        $this->assertNotNull($ns->findOne(array('name'=> new MongoRegex('/droopy/'))));
        $c->drop();
        $this->assertEquals($ns->findOne(array('name'=> new MongoRegex('/droopy/'))), null);
    }

    public function testListCollections() {
        $ns = $this->object->selectCollection('system.namespaces');

        for($i=0;$i<10;$i++) {
            $c = $this->object->selectCollection("x$i");
            $c->insert(array("foo" => "bar"));
        }

        $list = $this->object->listCollections();
        for($i=0;$i<10;$i++) {
            $this->assertTrue(in_array("phpunit.x$i", $list));
        }
    }

    public function testGetCursorInfo() {
        $c = $this->object->selectCollection('cinfo');
        $c->drop();
        for($i=0; $i<500; $i++) {
            $c->insert(array('x' => $i));
        }

        $info = $this->object->getCursorInfo();
        var_dump($info);
        $this->assertEquals($info['byLocation_size'], 0);
        $this->assertEquals($info['clientCursors_size'], 0);
        $this->assertEquals($info['ok'], 1);

        $cursor = $c->find();
        $cursor->hasNext();

        $info = $this->object->getCursorInfo();
        $this->assertEquals($info['byLocation_size'], 1);
        $this->assertEquals($info['clientCursors_size'], 1);
        $this->assertEquals($info['ok'], 1);

        $cursor2 = $c->find()->skip(20);
        $cursor2->hasNext();

        $info = $this->object->getCursorInfo();
        $this->assertEquals($info['byLocation_size'], 2);
        $this->assertEquals($info['clientCursors_size'], 2);
        $this->assertEquals($info['ok'], 1);
    }

    public function testCreateDBRef() {
        $ref = $this->object->createDBRef('foo.bar', array('foo' => 'bar'));
        $this->assertEquals($ref, null);

        $arr = array('_id' => new MongoId());
        $ref = $this->object->createDBRef('foo.bar', $arr);
        $this->assertNotNull($ref);
        $this->assertTrue(is_array($ref));

        $arr = array('_id' => 1);
        $ref = $this->object->createDBRef('foo.bar', $arr);
        $this->assertNotNull($ref);
        $this->assertTrue(is_array($ref));

        $ref = $this->object->createDBRef('foo.bar', new MongoId());
        $this->assertNotNull($ref);
        $this->assertTrue(is_array($ref));
    }

    public function testGetDBRef() {
        $c = $this->object->selectCollection('foo');
        $c->drop();
        for($i=0;$i<50;$i++) {
            $c->insert(array('x' => rand()));
        }
        $obj = $c->findOne();

        $ref = $this->object->createDBRef('foo', $obj);
        $obj2 = $this->object->getDBRef($ref);

        $this->assertNotNull($obj2);
        $this->assertEquals($obj['x'], $obj2['x']);
    }

    public function testExecute() {
        $ret = $this->object->execute('4+3*6');
        $this->assertEquals($ret['retval'], 22);

        $ret = $this->object->execute(new MongoCode('function() { return x+y; }', array('x' => 'hi', 'y' => 'bye')));
        $this->assertEquals($ret['retval'], 'hibye');

        $ret = $this->object->execute(new MongoCode('function(x) { return x+y; }', array('y' => 'bye')), array('bye'));
        $this->assertEquals($ret['retval'], 'byebye');
    }

}
?>
